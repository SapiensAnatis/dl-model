(function(){"use strict";const x=(e,t)=>t.some(n=>e instanceof n);let h,I;function L(){return h||(h=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])}function S(){return I||(I=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])}const B=new WeakMap,l=new WeakMap,D=new WeakMap,w=new WeakMap,y=new WeakMap;function v(e){const t=new Promise((n,r)=>{const o=()=>{e.removeEventListener("success",s),e.removeEventListener("error",a)},s=()=>{n(d(e.result)),o()},a=()=>{r(e.error),o()};e.addEventListener("success",s),e.addEventListener("error",a)});return t.then(n=>{n instanceof IDBCursor&&B.set(n,e)}).catch(()=>{}),y.set(t,e),t}function P(e){if(l.has(e))return;const t=new Promise((n,r)=>{const o=()=>{e.removeEventListener("complete",s),e.removeEventListener("error",a),e.removeEventListener("abort",a)},s=()=>{n(),o()},a=()=>{r(e.error||new DOMException("AbortError","AbortError")),o()};e.addEventListener("complete",s),e.addEventListener("error",a),e.addEventListener("abort",a)});l.set(e,t)}let m={get(e,t,n){if(e instanceof IDBTransaction){if(t==="done")return l.get(e);if(t==="objectStoreNames")return e.objectStoreNames||D.get(e);if(t==="store")return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return d(e[t])},set(e,t,n){return e[t]=n,!0},has(e,t){return e instanceof IDBTransaction&&(t==="done"||t==="store")?!0:t in e}};function k(e){m=e(m)}function C(e){return e===IDBDatabase.prototype.transaction&&!("objectStoreNames"in IDBTransaction.prototype)?function(t,...n){const r=e.call(p(this),t,...n);return D.set(r,t.sort?t.sort():[t]),d(r)}:S().includes(e)?function(...t){return e.apply(p(this),t),d(B.get(this))}:function(...t){return d(e.apply(p(this),t))}}function j(e){return typeof e=="function"?C(e):(e instanceof IDBTransaction&&P(e),x(e,L())?new Proxy(e,m):e)}function d(e){if(e instanceof IDBRequest)return v(e);if(w.has(e))return w.get(e);const t=j(e);return t!==e&&(w.set(e,t),y.set(t,e)),t}const p=e=>y.get(e);function A(e,t,{blocked:n,upgrade:r,blocking:o,terminated:s}={}){const a=indexedDB.open(e,t),i=d(a);return r&&a.addEventListener("upgradeneeded",c=>{r(d(a.result),c.oldVersion,c.newVersion,d(a.transaction))}),n&&a.addEventListener("blocked",()=>n()),i.then(c=>{s&&c.addEventListener("close",()=>s()),o&&c.addEventListener("versionchange",()=>o())}).catch(()=>{}),i}const T=["get","getKey","getAll","getAllKeys","count"],N=["put","add","delete","clear"],b=new Map;function M(e,t){if(!(e instanceof IDBDatabase&&!(t in e)&&typeof t=="string"))return;if(b.get(t))return b.get(t);const n=t.replace(/FromIndex$/,""),r=t!==n,o=N.includes(n);if(!(n in(r?IDBIndex:IDBObjectStore).prototype)||!(o||T.includes(n)))return;const s=async function(a,...i){const c=this.transaction(a,o?"readwrite":"readonly");let f=c.store;return r&&(f=f.index(i.shift())),(await Promise.all([f[n](...i),o&&c.done]))[0]};return b.set(t,s),s}k(e=>({...e,get:(t,n,r)=>M(t,n)||e.get(t,n,r),has:(t,n)=>!!M(t,n)||e.has(t,n)}));const u=A("model-viewer",3,{upgrade(e){e.objectStoreNames.contains("model")||e.createObjectStore("model",{keyPath:"id"}).createIndex("Name","name"),e.objectStoreNames.contains("animation")||e.createObjectStore("animation",{keyPath:"fullName"}).createIndex("User","user")}}),K=async(e,t)=>{const r=(await u).transaction(t,"readwrite"),o=e.map(s=>r.store.put(s));await Promise.all([...o,r.done])},F=async(e,t)=>await(await u).get(t,e),O=async(e,t,n)=>await(await u).getFromIndex(t,n,e),R=async(e,t,n)=>await(await u).getAllFromIndex(t,n,e),W=async(e,t,n)=>{const r=await u,o=IDBKeyRange.bound(t,n);return await r.getAll(e,o)},V=async(e,t)=>{const n=new Map;let s=await(await u).transaction(e,"readonly").store.openCursor();for(;s;)n.set(s.key,t?s.value[t]:s.value),s=await s.continue();return n},Q=async(e,t,n)=>{var c,f,E;if(!e)return[];const r=[],s=(await u).transaction(t,"readonly"),a=e.toLowerCase();let i=await s.store.openCursor();for(;i;){const g=(f=(c=i.value[n])==null?void 0:c.toLowerCase)==null?void 0:f.call(c);(E=g.includes)!=null&&E.call(g,a)&&r.push(i.value),i=await i.continue()}return r};addEventListener("message",async e=>{const{type:t,store:n,value:r,index:o}=e.data;switch(t){case"put":await K(r,n),postMessage("");break;case"get":postMessage(await F(r,n));break;case"getByIndex":postMessage(await O(r,n,o));break;case"getAllByIndex":postMessage(await R(r,n,o));break;case"getByKeyRange":const[s,a]=r.split("-");postMessage(await W(n,s,a));break;case"getMap":postMessage(await V(n,o));break;case"search":postMessage(await Q(r,n,o))}})})();
